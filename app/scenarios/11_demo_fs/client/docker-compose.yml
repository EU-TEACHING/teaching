services:
  
  rabbitmq:
    image: rabbitmq:3
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - 5672:5672
    env_file:
      - env/comm/rabbitmq_server.env

  # influxdb:
  #   image: influxdb:2.0
  #   container_name: influxdb
  #   hostname: influxdb
  #   ports:
  #     - 8086:8086
  #   env_file:
  #     - env/comm/influxdb_server.env

  # carla_mock:
  #   image: "chronis10/teaching-sensors:${ARCH:-amd64}"
  #   container_name: carla_mock
  #   depends_on: 
  #     - rabbitmq
  #   restart: on-failure
  #   env_file:
  #     - env/carla_mock.env
  #     - env/comm/rabbitmq_client.env
  #   volumes:
  #     - $APP_DIR/mock_data:/app/raw_data

  rl_predictor:
    image: "chronis10/teaching-ai-toolkit:${ARCH:-amd64}"
    container_name: rl_module_$GROUPID
    depends_on: 
      - rabbitmq
    restart: on-failure
    environment:
      - SERVICE_NAME=rl_module_$GROUPID
    env_file:
      - env/rl_predictor.env
      - env/comm/fs_client.env
      - env/comm/rabbitmq_client.env
    volumes:
      - $APP_DIR/data_storage:/app/storage
      - ../../../../teaching-ai-toolkit/federated:/app/federated

  mts-1:
    image: model-transfer-service:v0.1
    container_name: mts1
    depends_on:
      - rl_predictor
    restart: on-failure
    volumes:
      - $APP_DIR/data_storage:/app/storage
    environment:
      - "mts.folders.monitored=/app/storage/federated/local/rl_module/outgoing"
      - "mts.folders.downloads=/app/storage/federated/local/rl_module/incoming"
      - "mts.file.sender.id=mts1"
      - "mts.file.deleteUploads=false"
      - "kafka.bootstrapAddress=node249-hpc.isti.cnr.it:9092"
      - "kafka.groupId=$GROUPID"
      - "kafka.uploadsTopicName=teaching.federated_learning.client_models"
      - "kafka.downloadsTopicName=teaching.federated_learning.aggregated_model"
      - "crypto.algorithm=AES"
      - "crypto.aes.passwords={mts1: 'McoO!lMcjneowufUF23', cloud: 'IfjcoaO!ICJDMa214'}"
      - "crypto.aes.salts={mts1: 'dedc782d9130289c', cloud: '6068CCF5E6DFB752'}"

  # eda_mock:
  #   image: "chronis10/teaching-sensors:${ARCH:-amd64}"
  #   container_name: file_multisensor
  #   depends_on: 
  #     - rabbitmq
  #   restart: on-failure
  #   env_file:
  #     - env/eda_mock.env
  #     - env/comm/rabbitmq_client.env
  #   volumes:
  #     - $APP_DIR/mock_data:/app/raw_data

#   shimmer_sensors:
#     image: "chronis10/teaching-sensors:${ARCH:-amd64}"
#     container_name: shimmer_sensors
#     depends_on:
#       - rabbitmq
#       - influxdb
#     restart: on-failure
#     env_file:
#       - env/shimmer_sensors.env
#       - env/comm/rabbitmq_client.env
#     devices:
#       - /dev/rfcomm0:/dev/ttyS0
  
#   stress_module:
#     image: "chronis10/teaching-ai-toolkit:${ARCH:-amd64}"
#     container_name: stress_module
#     depends_on: 
#       - rabbitmq
#     restart: on-failure
#     env_file:
#       - env/stress_module.env
#       - env/comm/rabbitmq_client.env
#     volumes:
#       - $APP_DIR/data_storage:/app/storage
  
  # influxdb_logger:
  #   image: "chronis10/teaching-data:${ARCH:-amd64}"
  #   container_name: influxdb_logger
  #   depends_on:
  #     - rabbitmq
  #     - influxdb
  #   restart: on-failure
  #   env_file:
  #     - env/influxdb_logger.env
  #     - env/comm/rabbitmq_client.env
  #     - env/comm/influxdb_client.env
